# Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error
from scipy.stats import pearsonr

# Load data from CSV file
data = pd.read_csv('SVM_Production/SVM_Production_Model.csv')  # CSV file path

# Check the first few rows of the data to ensure it's loaded correctly
print(data.head())

# Define features (the six supporting variables) and the target variable
X = data[['FTHP', 'Choke Size', 'Gas Rate', 'Gas Cumm', 'Gas Gravity', 'Bottom hole Temperature']]  # Features
y = data['Bottom hole Pressure']  # Target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Plot histograms for training and testing datasets
def plot_histograms(y_train, y_test):
    plt.figure(figsize=(12, 6))

    # Training dataset histogram
    plt.subplot(1, 2, 1)
    sns.histplot(y_train, kde=True, color='blue', bins=20)
    plt.title('Histogram of Bottom Hole Pressure - Training Set')
    plt.xlabel('Bottom Hole Pressure (psia)')
    plt.ylabel('Frequency')
    plt.grid(True)

    # Testing dataset histogram
    plt.subplot(1, 2, 2)
    sns.histplot(y_test, kde=True, color='orange', bins=20)
    plt.title('Histogram of Bottom Hole Pressure - Testing Set')
    plt.xlabel('Bottom Hole Pressure (psia)')
    plt.ylabel('Frequency')
    plt.grid(True)

    plt.tight_layout()
    plt.show()

# Call the function to plot histograms
plot_histograms(y_train, y_test)

# Function to evaluate and print metrics for a model
def evaluate_model(model, X_train, X_test, y_train, y_test, model_name):
    # Train the model
    model.fit(X_train, y_train)
    
    # Predict values using the test set
    y_pred = model.predict(X_test)
    
    # Calculate RMSE
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    
    # Calculate MAE
    mae = mean_absolute_error(y_test, y_pred)
    
    # Calculate Correlation Coefficient
    corr_coefficient, _ = pearsonr(y_test, y_pred)
    
    # Print the evaluation metrics
    print(f"{model_name} - RMSE: {rmse}")
    print(f"{model_name} - MAE: {mae}")
    print(f"{model_name} - Correlation Coefficient: {corr_coefficient}")
    
    # Save the predicted values along with actual values to another CSV file
    predictions_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
    predictions_df.to_csv(f'predictions_{model_name}_BHP.csv', index=False)
    
    # Plot 1: Predicted vs Actual with Regression Line
    plt.figure(figsize=(8, 6))
    sns.regplot(x=y_test, y=y_pred, line_kws={"color": "red"})
    plt.title(f'Predicted vs Actual with Regression Line ({model_name})')
    plt.xlabel('Actual BHP (psia)')
    plt.ylabel('Predicted BHP (psia)')
    plt.grid(True)
    plt.show()
    
    # Plot 2: Residuals Plot (Actual - Predicted)
    residuals = y_test - y_pred
    plt.figure(figsize=(8, 6))
    plt.scatter(y_pred, residuals, color='purple')
    plt.axhline(y=0, color='red', linestyle='--')
    plt.title(f'Residuals Plot (Predicted vs Residuals) ({model_name})')
    plt.xlabel('Predicted BHP (psia)')
    plt.ylabel('Residuals (Errors)')
    plt.grid(True)
    plt.show()
    
    # Plot 3 Distribution of Errors (Residuals)
    plt.figure(figsize=(8, 6))
    sns.histplot(residuals, kde=True, color='green')
    plt.title(f'Distribution of Residuals ({model_name})')
    plt.xlabel('Residuals (Errors)')
    plt.ylabel('Frequency')
    plt.grid(True)
    plt.show()

# SVM Regression
svm_model = SVR(kernel='rbf', C=1.0, epsilon=0.1)
evaluate_model(svm_model, X_train, X_test, y_train, y_test, "SVM")

# K-Nearest Neighbors Regression
knn_model = KNeighborsRegressor(n_neighbors=5)
evaluate_model(knn_model, X_train, X_test, y_train, y_test, "KNN")

# Random Forest Regression
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
evaluate_model(rf_model, X_train, X_test, y_train, y_test, "Random_Forest")
